{"ast":null,"code":"import _objectSpread from \"/home/lukas/Desktop/projects/nutrition-label-maker/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from \"../actions/actionTypes\";\nconst initialState = {\n  selectedProducts: [],\n  clickedProduct: \"\",\n  showModal: false,\n  reciepieNutrients: {\n    name: \"\",\n    quantity: 0,\n    units: \"g\",\n    totalNutrients: {\n      ENERC_KCAL: {\n        quantity: 0\n      },\n      FAT: {\n        quantity: 0\n      },\n      FASAT: {\n        quantity: 0\n      },\n      FATRN: {\n        quantity: 0\n      },\n      CHOCDF: {\n        quantity: 0\n      },\n      FIBTG: {\n        quantity: 0\n      },\n      SUGAR: {\n        quantity: 0\n      },\n      PROCNT: {\n        quantity: 0\n      },\n      CHOLE: {\n        quantity: 0\n      },\n      NA: {\n        quantity: 0\n      },\n      CA: {\n        quantity: 0\n      },\n      FE: {\n        quantity: 0\n      },\n      VITA_RAE: {\n        quantity: 0\n      },\n      VITC: {\n        quantity: 0\n      }\n    }\n  }\n};\n\nconst addToRecipieNutrients = (state, productNutrients, amountOfProduct) => {\n  let totalRecipies = state.reciepieNutrients.totalNutrients;\n  Object.keys(totalRecipies).map(key => {\n    totalRecipies[key].quantity += productNutrients[key].quantity / 100 * amountOfProduct;\n  });\n  return totalRecipies;\n};\n\nconst addToRecipieAmount = (state, amount) => {\n  return state.reciepieNutrients.quantity + Number(amount);\n};\n\nconst deleteFromRecipieNutrients = (state, productNutrients, amountOfProduct) => {\n  let totalRecipies = _objectSpread({}, state.reciepieNutrients.totalNutrients);\n\n  Object.keys(totalRecipies).map(key => {\n    totalRecipies[key].quantity -= productNutrients[key].quantity / 100 * amountOfProduct;\n  });\n  return totalRecipies;\n};\n\nconst deleteFromRecipieAmount = (state, amount) => state.reciepieNutrients.quantity - Number(amount);\n\nconst changeProductAmount = (state, product, amount) => {\n  const allProducts = [...state.selectedProducts];\n  return allProducts.map(item => {\n    if (item.name === product.name) {\n      return _objectSpread({}, item, {\n        quantity: Number(amount)\n      });\n    }\n\n    return item;\n  });\n};\n\nconst changeTotalAmount = selectedProducts => {\n  let quantity = 0;\n  selectedProducts.map(item => {\n    return quantity += Number(item.quantity);\n  });\n  return quantity;\n};\n\nconst changeTotalNutreants = (state, product, amountOfProduct) => {\n  let totalRecipies = _objectSpread({}, state.reciepieNutrients.totalNutrients);\n\n  const oldAmount = 0;\n  state.selectedProducts.map(item => {\n    if (item.name === product.name) {\n      return oldAmount = item.quantity;\n    }\n  });\n  Object.keys(totalRecipies).map(key => {\n    totalRecipies[key].quantity += product.totalNutrients[key].quantity / 100 * amountOfProduct - product.totalNutrients[key].quantity / 100 * oldAmount;\n  });\n  return totalRecipies;\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SELECT_PRODUCT:\n      action.product.quantity = action.amount;\n      return _objectSpread({}, state, {\n        selectedProducts: state.selectedProducts.concat(action.product),\n        showModal: false,\n        reciepieNutrients: _objectSpread({}, state.reciepieNutrients, {\n          totalNutrients: addToRecipieNutrients(state, action.product.totalNutrients, action.product.quantity),\n          quantity: addToRecipieAmount(state, action.product.quantity)\n        })\n      });\n\n    case actionTypes.DELETE_PRODUCT:\n      return _objectSpread({}, state, {\n        selectedProducts: state.selectedProducts.filter(product => action.productName !== product.name),\n        reciepieNutrients: _objectSpread({}, state.reciepieNutrients, {\n          totalNutrients: deleteFromRecipieNutrients(state, action.product.totalNutrients, action.product.quantity),\n          quantity: deleteFromRecipieAmount(state, action.product.quantity)\n        })\n      });\n\n    case actionTypes.CLICKED_PRODUCT:\n      return _objectSpread({}, state, {\n        clickedProduct: action.product,\n        showModal: true\n      });\n\n    case actionTypes.CHANGE_AMOUNT:\n      const selectedProducts = changeProductAmount(state, action.product, action.amount);\n      return _objectSpread({}, state, {\n        selectedProducts,\n        reciepieNutrients: _objectSpread({}, state.reciepieNutrients, {\n          totalNutrients: changeTotalNutreants(state, action.product, action.amount),\n          quantity: changeTotalAmount(selectedProducts)\n        })\n      });\n\n    case actionTypes.CLOSE_MODAL:\n      return _objectSpread({}, state, {\n        showModal: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/lukas/Desktop/projects/nutrition-label-maker/src/Store/reducers/productsList.js"],"names":["actionTypes","initialState","selectedProducts","clickedProduct","showModal","reciepieNutrients","name","quantity","units","totalNutrients","ENERC_KCAL","FAT","FASAT","FATRN","CHOCDF","FIBTG","SUGAR","PROCNT","CHOLE","NA","CA","FE","VITA_RAE","VITC","addToRecipieNutrients","state","productNutrients","amountOfProduct","totalRecipies","Object","keys","map","key","addToRecipieAmount","amount","Number","deleteFromRecipieNutrients","deleteFromRecipieAmount","changeProductAmount","product","allProducts","item","changeTotalAmount","changeTotalNutreants","oldAmount","reducer","action","type","SELECT_PRODUCT","concat","DELETE_PRODUCT","filter","productName","CLICKED_PRODUCT","CHANGE_AMOUNT","CLOSE_MODAL"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\n\nconst initialState = {\n    selectedProducts:[],\n    clickedProduct: \"\",\n    showModal:false,\n    reciepieNutrients : {   \n            name : \"\",\n            quantity : 0,\n            units : \"g\",\n            totalNutrients : {\n                ENERC_KCAL : {quantity : 0},\n                FAT : {quantity : 0},\n                FASAT : {quantity : 0},\n                FATRN : {quantity : 0},\n                CHOCDF : {quantity : 0},\n                FIBTG : {quantity : 0},\n                SUGAR : {quantity : 0},\n                PROCNT : {quantity : 0},\n                CHOLE : {quantity : 0},\n                NA : {quantity : 0},\n                CA : {quantity: 0},\n                FE : {quantity: 0},\n                VITA_RAE : {quantity : 0},\n                VITC : {quantity : 0}\n            }\n    }\n}\n\n\n\nconst addToRecipieNutrients = (state, productNutrients, amountOfProduct) => {\n    let totalRecipies = state.reciepieNutrients.totalNutrients\n    Object.keys(totalRecipies).map((key) => {\n        totalRecipies[key].quantity += (productNutrients[key].quantity/100)*amountOfProduct\n    })\n    return totalRecipies\n}\n\nconst addToRecipieAmount = (state,amount) => {\n    return state.reciepieNutrients.quantity + Number(amount)\n}\n\nconst deleteFromRecipieNutrients = (state, productNutrients, amountOfProduct) => {\n    let totalRecipies = {...state.reciepieNutrients.totalNutrients}\n    Object.keys(totalRecipies).map((key) => {\n        totalRecipies[key].quantity -= (productNutrients[key].quantity/100)*amountOfProduct\n    })\n    return totalRecipies\n}\n\nconst deleteFromRecipieAmount = (state, amount) => (\n    state.reciepieNutrients.quantity - Number(amount)\n)\n\nconst changeProductAmount = (state, product, amount) => {\n    const allProducts = [...state.selectedProducts]\n    return allProducts.map(item => {\n        if (item.name === product.name) {\n            return {...item, quantity: Number(amount)};\n        }\n        return item;\n    })\n}\n const changeTotalAmount = (selectedProducts) => {\n     let quantity = 0\n     selectedProducts.map(item => {\n         return quantity += Number(item.quantity)\n     })\n     return quantity\n }\n\nconst changeTotalNutreants = (state, product, amountOfProduct) => {\n    let totalRecipies = {...state.reciepieNutrients.totalNutrients}\n    const oldAmount = 0\n    state.selectedProducts.map(item =>{\n        if(item.name === product.name){\n            return oldAmount = item.quantity\n        }\n    })\n    Object.keys(totalRecipies).map((key) => {\n        totalRecipies[key].quantity += ((product.totalNutrients[key].quantity/100)*amountOfProduct-(product.totalNutrients[key].quantity/100)*oldAmount)\n    })\n    return totalRecipies\n    }\n\nconst reducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case actionTypes.SELECT_PRODUCT: \n            action.product.quantity = action.amount\n            return {\n                ...state,\n                selectedProducts: state.selectedProducts.concat(action.product),\n                showModal:false,\n                reciepieNutrients : {\n                    ...state.reciepieNutrients,\n                    totalNutrients : addToRecipieNutrients(state, action.product.totalNutrients, action.product.quantity),\n                    quantity : addToRecipieAmount(state, action.product.quantity)\n                }\n            }\n        case actionTypes.DELETE_PRODUCT:\n            return {\n                ...state,\n                selectedProducts: state.selectedProducts.filter(product => action.productName !== product.name),\n                reciepieNutrients : {\n                    ...state.reciepieNutrients,\n                    totalNutrients : deleteFromRecipieNutrients(state, action.product.totalNutrients, action.product.quantity),\n                    quantity : deleteFromRecipieAmount(state, action.product.quantity)\n                }\n            }\n        case actionTypes.CLICKED_PRODUCT:\n            return {\n                ...state,\n                clickedProduct: action.product,\n                showModal:true\n            }\n        case actionTypes.CHANGE_AMOUNT:\n            const selectedProducts = changeProductAmount(state, action.product, action.amount);\n            return {\n                ...state,\n                selectedProducts,\n                reciepieNutrients: {\n                    ...state.reciepieNutrients,\n                    totalNutrients:changeTotalNutreants(state, action.product, action.amount),\n                    quantity: changeTotalAmount(selectedProducts)\n                }\n            }\n        case actionTypes.CLOSE_MODAL:\n            return {\n                ...state,\n                showModal:false\n            }\n        default: return state\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}