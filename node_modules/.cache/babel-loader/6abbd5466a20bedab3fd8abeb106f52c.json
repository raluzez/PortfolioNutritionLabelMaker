{"ast":null,"code":"var _jsxFileName = \"/home/lukas/Desktop/projects/nutrition-label-maker/src/components/NutritionLabel/NutritionLabel.js\";\nimport React from \"react\";\nimport Header from \"./NutritionLabelComponents/Header/Header\";\nimport Nutrients from \"./NutritionLabelComponents/Nutrients/Nutrients\";\nimport Vitamins from \"./NutritionLabelComponents/Vitamins/Vitamins\";\nimport Styles from \"./NutritionLabel.module.css\";\nimport get from \"lodash.get\";\n\nconst nutritionLabel = props => {\n  const dailyIntake = {\n    ENERC_KCAL: 2000,\n    FAT: 78,\n    FASAT: 20,\n    FATRN: 2,\n    CHOLE: 300,\n    NA: 2300,\n    CHOCDF: 275,\n    FIBTG: 28,\n    SUGAR: 50,\n    PROCNT: 50,\n    VITA_RAE: 0.9,\n    VITC: 90,\n    FE: 18,\n    CA: 1300\n  };\n  const product = get(props, 'product');\n\n  const dailyIntakePercent = (amount, recomendation) => {\n    return \"\".concat((amount / recomendation * 100).toFixed(1), \" %\");\n  };\n\n  const fixToTwo = (obj, path, def) => {\n    if (product.quantity) {\n      // combined two operations Math.round(result*100)/100 to get number with 2 or less numbers after comma and recalculation for 100g (result*100/product.quantity)\n      return Math.round(get(obj, path, def) * 10000 / product.quantity) / 100;\n    } else {\n      return Math.round(get(obj, path, def) * 100) / 100;\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: Styles.Container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Header, {\n    servingSize: 100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(Nutrients, {\n    calories: fixToTwo(product, \"totalNutrients.ENERC_KCAL.quantity\", 0),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.FAT.quantity', 0), get(dailyIntake, 'FAT'))), React.createElement(\"b\", {\n    className: Styles.Attribute,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Total Fat\"), \"  \", fixToTwo(product, 'totalNutrients.FAT.quantity', 0), \" g\", React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.FASAT.quantity', 0), get(dailyIntake, 'FASAT'))), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Saturated Fat  \", fixToTwo(product, 'totalNutrients.FASAT.quantity', 0), \" g\"), React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.FATRN.quantity', 0), get(dailyIntake, 'FATRN'))), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Trans Fat  \", fixToTwo(product, 'totalNutrients.FATRN.quantity', 0), \" g\"))), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.CHOLE.quantity', 0), get(dailyIntake, 'CHOLE'))), React.createElement(\"b\", {\n    className: Styles.Attribute,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Cholesterol\"), \"  \", fixToTwo(product, 'totalNutrients.CHOLE.quantity', 0), \"mg\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.NA.quantity', 0), get(dailyIntake, 'NA'))), React.createElement(\"b\", {\n    className: Styles.Attribute,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Sodium\"), \"  \", fixToTwo(product, 'totalNutrients.NA.quantity', 0), \" mg\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.CHOCDF.quantity', 0), get(dailyIntake, 'CHOCDF'))), React.createElement(\"b\", {\n    className: Styles.Attribute,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Total Carbohydrates\"), \"  \", fixToTwo(product, 'totalNutrients.CHOCDF.quantity', 0), \" g\", React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.FIBTG.quantity', 0), get(dailyIntake, 'FIBTG'))), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Dietary Fiber  \", fixToTwo(product, 'totalNutrients.FIBTG.quantity', 0), \" g\"), React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.SUGAR.quantity', 0), get(dailyIntake, 'SUGAR'))), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Sugars  \", fixToTwo(product, 'totalNutrients.SUGAR.quantity', 0), \" g\"))), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.PROCNT.quantity', 0), get(dailyIntake, 'PROCNT'))), React.createElement(\"b\", {\n    className: Styles.Attribute,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Protein\"), \"  \", fixToTwo(product, 'totalNutrients.PROCNT.quantity', 0), \" g\"))), React.createElement(Vitamins, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.VITA_RAE.quantity', 0), get(dailyIntake, 'VITA_RAE'))), React.createElement(\"b\", {\n    className: Styles.Attribute,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Vitamin A\"), \"  \", fixToTwo(product, 'totalNutrients.VITA_RAE.quantity', 0), \" mg\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.VITC.quantity', 0), get(dailyIntake, 'VITC'))), React.createElement(\"b\", {\n    className: Styles.Attribute,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Vitamin C\"), \"  \", fixToTwo(product, 'totalNutrients.VITC.quantity', 0), \" mg\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.FE.quantity', 0), get(dailyIntake, 'FE'))), React.createElement(\"b\", {\n    className: Styles.Attribute,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Iron\"), \"  \", fixToTwo(product, 'totalNutrients.FE.quantity', 0), \" mg\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: Styles.Float,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, dailyIntakePercent(fixToTwo(product, 'totalNutrients.CA.quantity', 0), get(dailyIntake, 'CA'))), React.createElement(\"b\", {\n    className: Styles.Attribute,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Calcium\"), \"  \", fixToTwo(product, 'totalNutrients.CA.quantity', 0), \" mg\"))));\n};\n\nexport default nutritionLabel;","map":{"version":3,"sources":["/home/lukas/Desktop/projects/nutrition-label-maker/src/components/NutritionLabel/NutritionLabel.js"],"names":["React","Header","Nutrients","Vitamins","Styles","get","nutritionLabel","props","dailyIntake","ENERC_KCAL","FAT","FASAT","FATRN","CHOLE","NA","CHOCDF","FIBTG","SUGAR","PROCNT","VITA_RAE","VITC","FE","CA","product","dailyIntakePercent","amount","recomendation","toFixed","fixToTwo","obj","path","def","quantity","Math","round","Container","Float","Attribute"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Header from \"./NutritionLabelComponents/Header/Header\";\nimport Nutrients from \"./NutritionLabelComponents/Nutrients/Nutrients\";\nimport Vitamins from \"./NutritionLabelComponents/Vitamins/Vitamins\";\nimport Styles from \"./NutritionLabel.module.css\";\nimport get from \"lodash.get\";\n\nconst nutritionLabel = (props) => {  \n        \n        const dailyIntake = {\n            ENERC_KCAL:2000,\n            FAT:78,\n            FASAT:20,\n            FATRN:2,\n            CHOLE:300,\n            NA:2300,\n            CHOCDF:275,\n            FIBTG:28,\n            SUGAR:50,\n            PROCNT:50,\n            VITA_RAE:0.9,\n            VITC:90,\n            FE:18,\n            CA:1300\n        }\n\n        const product = get(props,'product')\n\n        const dailyIntakePercent = (amount, recomendation) => {\n            return `${((amount/recomendation)*100).toFixed(1)} %`\n        }\n\n        const fixToTwo = (obj, path, def) => {\n            if(product.quantity) {\n                // combined two operations Math.round(result*100)/100 to get number with 2 or less numbers after comma and recalculation for 100g (result*100/product.quantity)\n                return Math.round(get(obj, path, def)*10000/product.quantity)/100 \n            } else { \n                return Math.round(get(obj, path, def)*100)/100 \n            }\n        }\n\n        return(\n            <div className={Styles.Container}>\n                <Header servingSize={100}/>\n                <Nutrients calories={fixToTwo(product,\"totalNutrients.ENERC_KCAL.quantity\",0)}>\n                    <ul>\n                        <li>\n                            <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.FAT.quantity', 0),get(dailyIntake, 'FAT'))}</div>\n                            <b className={Styles.Attribute}>Total Fat</b>  {fixToTwo(product, 'totalNutrients.FAT.quantity', 0)} g\n                            <ul>\n                                <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.FASAT.quantity', 0),get(dailyIntake, 'FASAT'))}</div>\n                                <li>Saturated Fat  {fixToTwo(product, 'totalNutrients.FASAT.quantity', 0)} g</li>\n                                <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.FATRN.quantity', 0),get(dailyIntake, 'FATRN'))}</div>\n                                <li>Trans Fat  {fixToTwo(product, 'totalNutrients.FATRN.quantity', 0)} g</li>\n                            </ul>\n                        </li>\n                        <li>\n                            <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.CHOLE.quantity', 0),get(dailyIntake, 'CHOLE'))}</div>\n                            <b className={Styles.Attribute}>Cholesterol</b>  {fixToTwo(product, 'totalNutrients.CHOLE.quantity', 0)}mg\n                        </li>\n                        <li>\n                            <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.NA.quantity', 0),get(dailyIntake, 'NA'))}</div>\n                            <b className={Styles.Attribute}>Sodium</b>  {fixToTwo(product, 'totalNutrients.NA.quantity', 0)} mg\n                        </li>\n                        <li>\n                            <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.CHOCDF.quantity', 0),get(dailyIntake, 'CHOCDF'))}</div>\n                            <b className={Styles.Attribute}>Total Carbohydrates</b>  {fixToTwo(product, 'totalNutrients.CHOCDF.quantity', 0)} g\n                            <ul>\n                                <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.FIBTG.quantity', 0),get(dailyIntake, 'FIBTG'))}</div>\n                                <li>Dietary Fiber  {fixToTwo(product, 'totalNutrients.FIBTG.quantity', 0)} g</li>\n                                <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.SUGAR.quantity', 0),get(dailyIntake, 'SUGAR'))}</div>\n                                <li>Sugars  {fixToTwo(product, 'totalNutrients.SUGAR.quantity', 0)} g</li>\n                            </ul>\n                        </li>\n                        <li>\n                            <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.PROCNT.quantity', 0),get(dailyIntake, 'PROCNT'))}</div>\n                            <b className={Styles.Attribute}>Protein</b>  {fixToTwo(product, 'totalNutrients.PROCNT.quantity', 0)} g\n                        </li>\n                    </ul>\n                </Nutrients>\n                <Vitamins>\n                    <ul>\n                        <li>\n                            <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.VITA_RAE.quantity', 0),get(dailyIntake, 'VITA_RAE'))}</div>\n                            <b className={Styles.Attribute}>Vitamin A</b>  {fixToTwo(product, 'totalNutrients.VITA_RAE.quantity', 0)} mg\n                        </li>\n                        <li>\n                            <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.VITC.quantity', 0),get(dailyIntake, 'VITC'))}</div>\n                            <b className={Styles.Attribute}>Vitamin C</b>  {fixToTwo(product, 'totalNutrients.VITC.quantity', 0)} mg\n                        </li>\n                        <li>\n                            <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.FE.quantity', 0),get(dailyIntake, 'FE'))}</div>\n                            <b className={Styles.Attribute}>Iron</b>  {fixToTwo(product, 'totalNutrients.FE.quantity', 0)} mg\n                        </li>\n                        <li>\n                            <div className={Styles.Float}>{dailyIntakePercent(fixToTwo(product, 'totalNutrients.CA.quantity', 0),get(dailyIntake, 'CA'))}</div>\n                            <b className={Styles.Attribute}>Calcium</b>  {fixToTwo(product, 'totalNutrients.CA.quantity', 0)} mg\n                        </li>\n                    </ul>\n                </Vitamins>\n            </div>\n      )\n}\n\nexport default nutritionLabel;"]},"metadata":{},"sourceType":"module"}