{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nexport const closeSignUp = () => {\n  return {\n    type: actionTypes.CLOSE_SIGN_UP\n  };\n};\nexport const openSignUp = () => {\n  return {\n    type: actionTypes.OPEN_SIGN_UP\n  };\n};\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const auth = (email, password, isSignUp) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email,\n      password,\n      returnSecureToken: true\n    };\n    let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAIQjITVt2V1MNvWLT3y5TIOu904o8TmH0\";\n\n    if (isSignUp) {\n      url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAIQjITVt2V1MNvWLT3y5TIOu904o8TmH0\";\n    }\n\n    axios.post(url, authData).then(response => {\n      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n      localStorage.setItem(\"token\", response.data.idToken);\n      localStorage.setItem(\"expirationDate\", expirationDate);\n      localStorage.setItem(\"userId\", response.data.localId);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n    }).catch(error => {\n      dispatch(authFail(error.response.data.error));\n    });\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('userId');\n  return {\n    type: actionTypes.LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\nexport const authCheckLogin = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"));\n\n      if (expirationDate > new Date()) {\n        const userId = localStorage.getItem(\"userId\");\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      } else {\n        dispatch(logout());\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/lukas/Desktop/projects/nutrition-label-maker/src/Store/actions/auth.js"],"names":["actionTypes","axios","closeSignUp","type","CLOSE_SIGN_UP","openSignUp","OPEN_SIGN_UP","authStart","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","auth","email","password","isSignUp","dispatch","authData","returnSecureToken","url","post","then","response","expirationDate","Date","getTime","data","expiresIn","localStorage","setItem","localId","catch","logout","removeItem","LOGOUT","checkAuthTimeout","expirationTime","setTimeout","authCheckLogin","getItem"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\n\nexport const closeSignUp = () => {\n    return {\n        type: actionTypes.CLOSE_SIGN_UP\n    }\n}\n\nexport const openSignUp = () => {\n    return {\n        type: actionTypes.OPEN_SIGN_UP\n    }\n}\n\nexport const authStart = () => {\n    return {\n      type: actionTypes.AUTH_START\n    }\n  }\n  \nexport const authSuccess = (token, userId) => {\n    return {\n      type: actionTypes.AUTH_SUCCESS,\n      idToken: token,\n      userId: userId\n    }\n  }\n  \nexport const authFail = (error) => {\n    return {\n      type: actionTypes.AUTH_FAIL,\n      error: error\n    }\n  }\n\nexport const auth = (email, password, isSignUp) => {\n    return dispatch => {\n        dispatch(authStart())\n        const authData = {\n            email,\n            password,\n            returnSecureToken: true\n        }\n        let url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAIQjITVt2V1MNvWLT3y5TIOu904o8TmH0\"\n        if (isSignUp) {\n            url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAIQjITVt2V1MNvWLT3y5TIOu904o8TmH0\"\n        }\n        axios.post(url, authData)\n            .then(response => {\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn *1000)\n                localStorage.setItem(\"token\", response.data.idToken)\n                localStorage.setItem(\"expirationDate\", expirationDate)\n                localStorage.setItem(\"userId\", response.data.localId)\n                dispatch(authSuccess(response.data.idToken, response.data.localId))\n            })\n            .catch(error => {\n                dispatch(authFail(error.response.data.error))\n            })\n    }\n}\n\nexport const logout = () => {\n  localStorage.removeItem('token')\n  localStorage.removeItem('expirationDate')\n  localStorage.removeItem('userId')\n  return {\n    type: actionTypes.LOGOUT\n  }\n}\n\nexport const checkAuthTimeout = (expirationTime) => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout())\n    }, expirationTime)\n  }\n}\n\nexport const authCheckLogin = () => {\n  return dispatch => {\n    const token = localStorage.getItem(\"token\")\n    if (!token) {\n      dispatch(logout())\n    } else {\n      const expirationDate = new Date(localStorage.getItem(\"expirationDate\"))\n      if (expirationDate > new Date()){\n        const userId = localStorage.getItem(\"userId\")\n        dispatch(authSuccess(token, userId))\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000))\n      } else {\n        dispatch(logout())\n      }\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}